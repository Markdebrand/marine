# ---- Etapa 1: Compilación del frontend (Build Stage) ----
FROM node:20-bullseye-slim AS build-stage

WORKDIR /app

# Copia los archivos de configuración de dependencias para aprovechar el caché de Docker
COPY package*.json ./

# Instala dependencias del sistema necesarias para compilar módulos nativos
# y utiliza `npm ci` para instalaciones reproducibles.
RUN apt-get update \
	&& apt-get install -y --no-install-recommends python3 build-essential ca-certificates \
	&& rm -rf /var/lib/apt/lists/*

# Instala las dependencias de npm (incluye devDependencies para el build)
RUN npm ci --silent --include=dev

# Copia el resto del código del frontend
COPY . .

# Permitir inyectar la URL de API en build si es necesario
ARG NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

# Evitar OOM en builds grandes
ENV NODE_OPTIONS=--max-old-space-size=4096

# Ajustes de CI para Next
ENV NEXT_TELEMETRY_DISABLED=1 \
	CI=1 \
	NEXT_DISABLE_SWC_NATIVE=1

# Compila (sin usar el script que fuerza Turbopack) y genera la salida estática
# Usamos `npx next build` aquí para evitar problemas con `--turbopack` en entornos
# limitados durante la construcción de la imagen.
RUN npm run build
RUN test -d out || ./node_modules/.bin/next export

# ---- Etapa 2: Servir con Nginx (Production Stage) ----
FROM nginx:1.27

# Copia los archivos estáticos exportados de la etapa anterior
COPY --from=build-stage /app/out /usr/share/nginx/html

# Copia el archivo de configuración de Nginx para producción
COPY nginx.conf.frontend /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]