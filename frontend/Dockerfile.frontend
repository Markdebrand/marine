# ---- Etapa 1: Build del frontend ----
FROM node:20-bullseye-slim AS build-stage

WORKDIR /app

# Copia los archivos de configuración de dependencias para aprovechar el caché de Docker
COPY package*.json ./

# Dependencias del sistema para módulos nativos
RUN apt-get update \
	&& apt-get install -y --no-install-recommends python3 build-essential ca-certificates \
	&& rm -rf /var/lib/apt/lists/*

# Instala las dependencias de npm (incluye devDependencies para el build)
RUN npm ci --silent --include=dev

# Copia el resto del código del frontend
COPY . .

# Variables públicas en tiempo de build
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_AISSTREAM_KEY
ARG NEXT_PUBLIC_BACKEND_URL
ARG NEXT_PUBLIC_DISABLE_AIS_WS_FALLBACK
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_AISSTREAM_KEY=${NEXT_PUBLIC_AISSTREAM_KEY}
ENV NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
ENV NEXT_PUBLIC_DISABLE_AIS_WS_FALLBACK=${NEXT_PUBLIC_DISABLE_AIS_WS_FALLBACK}

# Evitar OOM en builds grandes y desactivar telemetría
ENV NODE_OPTIONS=--max-old-space-size=4096
ENV NEXT_TELEMETRY_DISABLED=1 CI=1

# Compila la app usando la versión de Next del proyecto
RUN npm run build

# ---- Etapa 2: Runtime con Next standalone ----
FROM node:20-bullseye-slim AS runner

WORKDIR /app
ENV NODE_ENV=production
# Exponer en 80 para que el proxy global pueda enrutar sin cambios
ENV PORT=80
EXPOSE 80

# Copiamos sólo los artefactos necesarios del build standalone
COPY --from=build-stage /app/public ./public
COPY --from=build-stage /app/.next/standalone ./
COPY --from=build-stage /app/.next/static ./.next/static

# Ejecuta el servidor de Next (standalone)
CMD ["node", "server.js"]