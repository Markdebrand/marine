# syntax=docker/dockerfile:1

# ---- Base ----
FROM node:20-slim AS base
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1
WORKDIR /app

# ---- Dependencies ----
FROM base AS deps
# Instala dependencias sólo con los archivos de manifiesto para aprovechar la cache
COPY package.json package-lock.json* pnpm-lock.yaml* yarn.lock* ./
# Usa npm por defecto; si no hay lockfile, hace fallback a install normal
RUN if [ -f package-lock.json ]; then npm ci --omit=dev; \
    else npm install --omit=dev; fi

# ---- Builder ----
FROM node:20-slim AS builder
ENV NEXT_TELEMETRY_DISABLED=1
WORKDIR /app

# Build args para variables públicas (inyectadas en tiempo de build)
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_AISSTREAM_KEY
ARG NEXT_PUBLIC_BACKEND_URL
ARG NEXT_PUBLIC_DISABLE_AIS_WS_FALLBACK
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} \
    NEXT_PUBLIC_AISSTREAM_KEY=${NEXT_PUBLIC_AISSTREAM_KEY} \
    NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL} \
    NEXT_PUBLIC_DISABLE_AIS_WS_FALLBACK=${NEXT_PUBLIC_DISABLE_AIS_WS_FALLBACK}

COPY package.json package-lock.json* pnpm-lock.yaml* yarn.lock* ./
# En Debian slim instalamos herramientas de compilación que algunas dependencias
# pueden necesitar (p. ej. módulos nativos o SWC). Si la instalación falla, el
# comando sigue adelante gracias a '|| true' para no romper la build por apt.
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential python3 ca-certificates && rm -rf /var/lib/apt/lists/* || true
RUN if [ -f package-lock.json ]; then npm ci; else npm install; fi

# Copia el código fuente y construye
COPY . .
RUN npm run build

# ---- Runner ----
FROM node:20-slim AS runner
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    HOSTNAME=0.0.0.0 \
    PORT=80
WORKDIR /app

# Crea usuario no root (compatible con Debian slim)
RUN groupadd -g 1001 nodejs 2>/dev/null || true \
 && useradd -u 1001 -r -g nodejs -d /nonexistent -s /usr/sbin/nologin nextjs 2>/dev/null || true

# Copiamos artefactos del build y dependencias para ejecución confiable en contenedor
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=deps /app/node_modules ./node_modules

# Permisos
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 80

# Ejecuta Next en modo producción
CMD ["npm", "run", "start"]
