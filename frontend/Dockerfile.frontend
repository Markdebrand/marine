# ---- Etapa 1: Compilación del frontend (Build Stage) ----
FROM node:20-bullseye-slim AS build-stage

WORKDIR /app

# Copia los archivos de configuración de dependencias para aprovechar el caché de Docker
COPY package*.json ./

# Instala dependencias del sistema necesarias para compilar módulos nativos
# y utiliza `npm ci` para instalaciones reproducibles.
RUN apt-get update \
	&& apt-get install -y --no-install-recommends python3 build-essential ca-certificates \
	&& rm -rf /var/lib/apt/lists/*

# Instala las dependencias de npm (incluye devDependencies para el build)
RUN npm ci --silent --include=dev

# Copia el resto del código del frontend
COPY . .

# Permitir inyectar la URL de API en build si es necesario
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_AISSTREAM_KEY
ARG NEXT_PUBLIC_BACKEND_URL
ARG NEXT_PUBLIC_DISABLE_AIS_WS_FALLBACK
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_AISSTREAM_KEY=${NEXT_PUBLIC_AISSTREAM_KEY}
ENV NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
ENV NEXT_PUBLIC_DISABLE_AIS_WS_FALLBACK=${NEXT_PUBLIC_DISABLE_AIS_WS_FALLBACK}

# Evitar OOM en builds grandes
ENV NODE_OPTIONS=--max-old-space-size=4096

# Ajustes de CI para Next
ENV NEXT_TELEMETRY_DISABLED=1 \
	CI=1

# Compila y genera la salida estática con Next nativo (SWC nativo habilitado por defecto)
# Usamos `npx next build` para evitar cualquier wrapper custom del package.json.
RUN npx --yes next@15 build

# ---- Etapa 2: Servir con Nginx (Production Stage) ----
FROM nginx:1.27

# Copia los archivos estáticos exportados de la etapa anterior
COPY --from=build-stage /app/out /usr/share/nginx/html

# Copia el archivo de configuración de Nginx para producción
COPY nginx.conf.frontend /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]